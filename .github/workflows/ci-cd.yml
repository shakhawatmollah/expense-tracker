name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  # Backend Testing & Quality
  backend-tests:
    name: 🔧 Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: expense_tracker_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, gd
          coverage: xdebug

      - name: 📦 Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: backend/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: 🎼 Install Composer dependencies
        working-directory: ./backend
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: 📝 Copy environment file
        working-directory: ./backend
        run: cp .env.example .env

      - name: 🔑 Generate application key
        working-directory: ./backend
        run: php artisan key:generate

      - name: 🗄️ Run database migrations
        working-directory: ./backend
        run: php artisan migrate --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: expense_tracker_test
          DB_USERNAME: root
          DB_PASSWORD: root

      - name: 🌱 Seed database
        working-directory: ./backend
        run: php artisan db:seed --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: expense_tracker_test
          DB_USERNAME: root
          DB_PASSWORD: root

      - name: 🧪 Run PHPUnit tests
        working-directory: ./backend
        run: php artisan test --coverage
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: expense_tracker_test
          DB_USERNAME: root
          DB_PASSWORD: root

      - name: 🎨 Check code style (PHP CS Fixer)
        working-directory: ./backend
        run: composer cs-check

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Testing & Quality
  frontend-tests:
    name: 🎨 Frontend Tests & Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🧪 Run tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: 🔍 Lint code
        working-directory: ./frontend
        run: npm run lint:check

      - name: 🎨 Check code formatting
        working-directory: ./frontend
        run: npm run format:check

      - name: 🏗️ Build application
        working-directory: ./frontend
        run: npm run build

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage

  # Security Scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 Backend Security Audit
        working-directory: ./backend
        run: |
          composer audit --format=json > security-audit.json || true
          if [ -s security-audit.json ]; then
            echo "⚠️ Security vulnerabilities found in backend dependencies"
            cat security-audit.json
          fi

      - name: 🔐 Frontend Security Audit
        working-directory: ./frontend
        run: |
          npm audit --audit-level=moderate --json > security-audit.json || true
          if [ -s security-audit.json ]; then
            echo "⚠️ Security vulnerabilities found in frontend dependencies"
            cat security-audit.json
          fi

  # Build & Deploy (Production)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, gd

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install backend dependencies
        working-directory: ./backend
        run: composer install --no-dev --optimize-autoloader --no-progress

      - name: 📦 Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: 🗄️ Optimize backend
        working-directory: ./backend
        run: |
          php artisan config:cache
          php artisan route:cache

      - name: 📁 Create deployment package
        run: |
          mkdir -p deployment
          cp -r backend deployment/
          cp -r frontend/dist deployment/frontend
          tar -czf expense-tracker-${{ github.sha }}.tar.gz deployment/

      - name: 📤 Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: expense-tracker-deployment
          path: expense-tracker-${{ github.sha }}.tar.gz
          retention-days: 30

  # Performance Testing
  performance-test:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: 🚀 Start preview server
        working-directory: ./frontend
        run: npm run preview &
        
      - name: ⚡ Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Database Migration Check
  migration-check:
    name: 🗄️ Database Migration Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: expense_tracker_migration_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql

      - name: 🎼 Install Composer dependencies
        working-directory: ./backend
        run: composer install --no-progress --prefer-dist

      - name: 📝 Copy environment file
        working-directory: ./backend
        run: cp .env.example .env

      - name: 🔑 Generate application key
        working-directory: ./backend
        run: php artisan key:generate

      - name: 🔄 Test migration rollback and re-migration
        working-directory: ./backend
        run: |
          php artisan migrate --force
          php artisan migrate:rollback --force
          php artisan migrate --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: expense_tracker_migration_test
          DB_USERNAME: root
          DB_PASSWORD: root